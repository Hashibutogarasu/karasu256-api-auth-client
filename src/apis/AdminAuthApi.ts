/* tslint:disable */
/* eslint-disable */
/**
 * Karasu Lab API
 * API documentation for Karasu Lab
 *
 * The version of the OpenAPI document: 3.3.23
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminAuthControllerChangePasswordRequest,
  AdminAuthControllerDisableMfaRequest,
  AdminAuthControllerEnableMfaRequest,
  AdminAuthControllerForgotPasswordRequest,
  AdminAuthControllerRefreshTokenRequest,
  AdminAuthControllerSetUpMfaRequest,
  AdminAuthControllerSigninConfirmRequest,
  AdminAuthControllerSigninRequest,
  AdminAuthControllerSignupRequest,
} from '../models/index';
import {
    AdminAuthControllerChangePasswordRequestFromJSON,
    AdminAuthControllerChangePasswordRequestToJSON,
    AdminAuthControllerDisableMfaRequestFromJSON,
    AdminAuthControllerDisableMfaRequestToJSON,
    AdminAuthControllerEnableMfaRequestFromJSON,
    AdminAuthControllerEnableMfaRequestToJSON,
    AdminAuthControllerForgotPasswordRequestFromJSON,
    AdminAuthControllerForgotPasswordRequestToJSON,
    AdminAuthControllerRefreshTokenRequestFromJSON,
    AdminAuthControllerRefreshTokenRequestToJSON,
    AdminAuthControllerSetUpMfaRequestFromJSON,
    AdminAuthControllerSetUpMfaRequestToJSON,
    AdminAuthControllerSigninConfirmRequestFromJSON,
    AdminAuthControllerSigninConfirmRequestToJSON,
    AdminAuthControllerSigninRequestFromJSON,
    AdminAuthControllerSigninRequestToJSON,
    AdminAuthControllerSignupRequestFromJSON,
    AdminAuthControllerSignupRequestToJSON,
} from '../models/index';

export interface AdminAuthControllerChangePasswordOperationRequest {
    AdminAuthControllerChangePasswordRequest: AdminAuthControllerChangePasswordRequest;
}

export interface AdminAuthControllerDisableMfaOperationRequest {
    AdminAuthControllerDisableMfaRequest: AdminAuthControllerDisableMfaRequest;
}

export interface AdminAuthControllerEnableMfaOperationRequest {
    AdminAuthControllerEnableMfaRequest: AdminAuthControllerEnableMfaRequest;
}

export interface AdminAuthControllerForgotPasswordOperationRequest {
    AdminAuthControllerForgotPasswordRequest: AdminAuthControllerForgotPasswordRequest;
}

export interface AdminAuthControllerForgotPasswordConfirmRequest {
    AdminAuthControllerSigninRequest: AdminAuthControllerSigninRequest;
}

export interface AdminAuthControllerGetRefreshTokenRequest {
    AdminAuthControllerSetUpMfaRequest: AdminAuthControllerSetUpMfaRequest;
}

export interface AdminAuthControllerRefreshTokenOperationRequest {
    AdminAuthControllerRefreshTokenRequest: AdminAuthControllerRefreshTokenRequest;
}

export interface AdminAuthControllerSetUpMfaOperationRequest {
    AdminAuthControllerSetUpMfaRequest: AdminAuthControllerSetUpMfaRequest;
}

export interface AdminAuthControllerSigninOperationRequest {
    AdminAuthControllerSigninRequest: AdminAuthControllerSigninRequest;
}

export interface AdminAuthControllerSigninConfirmOperationRequest {
    AdminAuthControllerSigninConfirmRequest: AdminAuthControllerSigninConfirmRequest;
}

export interface AdminAuthControllerSignupOperationRequest {
    AdminAuthControllerSignupRequest: AdminAuthControllerSignupRequest;
}

/**
 * AdminAuthApi - interface
 * 
 * @export
 * @interface AdminAuthApiInterface
 */
export interface AdminAuthApiInterface {
    /**
     * 
     * @param {AdminAuthControllerChangePasswordRequest} AdminAuthControllerChangePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerChangePasswordRaw(requestParameters: AdminAuthControllerChangePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerChangePassword(AdminAuthControllerChangePasswordRequest: AdminAuthControllerChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {AdminAuthControllerDisableMfaRequest} AdminAuthControllerDisableMfaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerDisableMfaRaw(requestParameters: AdminAuthControllerDisableMfaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerDisableMfa(AdminAuthControllerDisableMfaRequest: AdminAuthControllerDisableMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {AdminAuthControllerEnableMfaRequest} AdminAuthControllerEnableMfaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerEnableMfaRaw(requestParameters: AdminAuthControllerEnableMfaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerEnableMfa(AdminAuthControllerEnableMfaRequest: AdminAuthControllerEnableMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {AdminAuthControllerForgotPasswordRequest} AdminAuthControllerForgotPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerForgotPasswordRaw(requestParameters: AdminAuthControllerForgotPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerForgotPassword(AdminAuthControllerForgotPasswordRequest: AdminAuthControllerForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {AdminAuthControllerSigninRequest} AdminAuthControllerSigninRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerForgotPasswordConfirmRaw(requestParameters: AdminAuthControllerForgotPasswordConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerForgotPasswordConfirm(AdminAuthControllerSigninRequest: AdminAuthControllerSigninRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {AdminAuthControllerSetUpMfaRequest} AdminAuthControllerSetUpMfaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerGetRefreshTokenRaw(requestParameters: AdminAuthControllerGetRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerGetRefreshToken(AdminAuthControllerSetUpMfaRequest: AdminAuthControllerSetUpMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    adminAuthControllerMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {AdminAuthControllerRefreshTokenRequest} AdminAuthControllerRefreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerRefreshTokenRaw(requestParameters: AdminAuthControllerRefreshTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerRefreshToken(AdminAuthControllerRefreshTokenRequest: AdminAuthControllerRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {AdminAuthControllerSetUpMfaRequest} AdminAuthControllerSetUpMfaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerSetUpMfaRaw(requestParameters: AdminAuthControllerSetUpMfaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerSetUpMfa(AdminAuthControllerSetUpMfaRequest: AdminAuthControllerSetUpMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {AdminAuthControllerSigninRequest} AdminAuthControllerSigninRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerSigninRaw(requestParameters: AdminAuthControllerSigninOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerSignin(AdminAuthControllerSigninRequest: AdminAuthControllerSigninRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {AdminAuthControllerSigninConfirmRequest} AdminAuthControllerSigninConfirmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerSigninConfirmRaw(requestParameters: AdminAuthControllerSigninConfirmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerSigninConfirm(AdminAuthControllerSigninConfirmRequest: AdminAuthControllerSigninConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {AdminAuthControllerSignupRequest} AdminAuthControllerSignupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthApiInterface
     */
    adminAuthControllerSignupRaw(requestParameters: AdminAuthControllerSignupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     */
    adminAuthControllerSignup(AdminAuthControllerSignupRequest: AdminAuthControllerSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class AdminAuthApi extends runtime.BaseAPI implements AdminAuthApiInterface {

    /**
     */
    async adminAuthControllerChangePasswordRaw(requestParameters: AdminAuthControllerChangePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerChangePasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerChangePasswordRequest',
                'Required parameter "AdminAuthControllerChangePasswordRequest" was null or undefined when calling adminAuthControllerChangePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/admin/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerChangePasswordRequestToJSON(requestParameters['AdminAuthControllerChangePasswordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerChangePassword(AdminAuthControllerChangePasswordRequest: AdminAuthControllerChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerChangePasswordRaw({ AdminAuthControllerChangePasswordRequest: AdminAuthControllerChangePasswordRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminAuthControllerDisableMfaRaw(requestParameters: AdminAuthControllerDisableMfaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerDisableMfaRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerDisableMfaRequest',
                'Required parameter "AdminAuthControllerDisableMfaRequest" was null or undefined when calling adminAuthControllerDisableMfa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/admin/mfa/disable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerDisableMfaRequestToJSON(requestParameters['AdminAuthControllerDisableMfaRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerDisableMfa(AdminAuthControllerDisableMfaRequest: AdminAuthControllerDisableMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerDisableMfaRaw({ AdminAuthControllerDisableMfaRequest: AdminAuthControllerDisableMfaRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminAuthControllerEnableMfaRaw(requestParameters: AdminAuthControllerEnableMfaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerEnableMfaRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerEnableMfaRequest',
                'Required parameter "AdminAuthControllerEnableMfaRequest" was null or undefined when calling adminAuthControllerEnableMfa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/admin/mfa/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerEnableMfaRequestToJSON(requestParameters['AdminAuthControllerEnableMfaRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerEnableMfa(AdminAuthControllerEnableMfaRequest: AdminAuthControllerEnableMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerEnableMfaRaw({ AdminAuthControllerEnableMfaRequest: AdminAuthControllerEnableMfaRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminAuthControllerForgotPasswordRaw(requestParameters: AdminAuthControllerForgotPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerForgotPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerForgotPasswordRequest',
                'Required parameter "AdminAuthControllerForgotPasswordRequest" was null or undefined when calling adminAuthControllerForgotPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/admin/forgot-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerForgotPasswordRequestToJSON(requestParameters['AdminAuthControllerForgotPasswordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerForgotPassword(AdminAuthControllerForgotPasswordRequest: AdminAuthControllerForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerForgotPasswordRaw({ AdminAuthControllerForgotPasswordRequest: AdminAuthControllerForgotPasswordRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminAuthControllerForgotPasswordConfirmRaw(requestParameters: AdminAuthControllerForgotPasswordConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerSigninRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerSigninRequest',
                'Required parameter "AdminAuthControllerSigninRequest" was null or undefined when calling adminAuthControllerForgotPasswordConfirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/admin/forgot-password/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerSigninRequestToJSON(requestParameters['AdminAuthControllerSigninRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerForgotPasswordConfirm(AdminAuthControllerSigninRequest: AdminAuthControllerSigninRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerForgotPasswordConfirmRaw({ AdminAuthControllerSigninRequest: AdminAuthControllerSigninRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminAuthControllerGetRefreshTokenRaw(requestParameters: AdminAuthControllerGetRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerSetUpMfaRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerSetUpMfaRequest',
                'Required parameter "AdminAuthControllerSetUpMfaRequest" was null or undefined when calling adminAuthControllerGetRefreshToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/admin/get-refresh-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerSetUpMfaRequestToJSON(requestParameters['AdminAuthControllerSetUpMfaRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerGetRefreshToken(AdminAuthControllerSetUpMfaRequest: AdminAuthControllerSetUpMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerGetRefreshTokenRaw({ AdminAuthControllerSetUpMfaRequest: AdminAuthControllerSetUpMfaRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminAuthControllerMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/admin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminAuthControllerMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminAuthControllerMeRaw(initOverrides);
    }

    /**
     */
    async adminAuthControllerRefreshTokenRaw(requestParameters: AdminAuthControllerRefreshTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerRefreshTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerRefreshTokenRequest',
                'Required parameter "AdminAuthControllerRefreshTokenRequest" was null or undefined when calling adminAuthControllerRefreshToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/admin/refresh-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerRefreshTokenRequestToJSON(requestParameters['AdminAuthControllerRefreshTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerRefreshToken(AdminAuthControllerRefreshTokenRequest: AdminAuthControllerRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerRefreshTokenRaw({ AdminAuthControllerRefreshTokenRequest: AdminAuthControllerRefreshTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminAuthControllerSetUpMfaRaw(requestParameters: AdminAuthControllerSetUpMfaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerSetUpMfaRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerSetUpMfaRequest',
                'Required parameter "AdminAuthControllerSetUpMfaRequest" was null or undefined when calling adminAuthControllerSetUpMfa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/admin/mfa/set-up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerSetUpMfaRequestToJSON(requestParameters['AdminAuthControllerSetUpMfaRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerSetUpMfa(AdminAuthControllerSetUpMfaRequest: AdminAuthControllerSetUpMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerSetUpMfaRaw({ AdminAuthControllerSetUpMfaRequest: AdminAuthControllerSetUpMfaRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminAuthControllerSigninRaw(requestParameters: AdminAuthControllerSigninOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerSigninRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerSigninRequest',
                'Required parameter "AdminAuthControllerSigninRequest" was null or undefined when calling adminAuthControllerSignin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/admin/sign-in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerSigninRequestToJSON(requestParameters['AdminAuthControllerSigninRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerSignin(AdminAuthControllerSigninRequest: AdminAuthControllerSigninRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerSigninRaw({ AdminAuthControllerSigninRequest: AdminAuthControllerSigninRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminAuthControllerSigninConfirmRaw(requestParameters: AdminAuthControllerSigninConfirmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerSigninConfirmRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerSigninConfirmRequest',
                'Required parameter "AdminAuthControllerSigninConfirmRequest" was null or undefined when calling adminAuthControllerSigninConfirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/admin/sign-up/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerSigninConfirmRequestToJSON(requestParameters['AdminAuthControllerSigninConfirmRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerSigninConfirm(AdminAuthControllerSigninConfirmRequest: AdminAuthControllerSigninConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerSigninConfirmRaw({ AdminAuthControllerSigninConfirmRequest: AdminAuthControllerSigninConfirmRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminAuthControllerSignupRaw(requestParameters: AdminAuthControllerSignupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['AdminAuthControllerSignupRequest'] == null) {
            throw new runtime.RequiredError(
                'AdminAuthControllerSignupRequest',
                'Required parameter "AdminAuthControllerSignupRequest" was null or undefined when calling adminAuthControllerSignup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/admin/sign-up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminAuthControllerSignupRequestToJSON(requestParameters['AdminAuthControllerSignupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminAuthControllerSignup(AdminAuthControllerSignupRequest: AdminAuthControllerSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminAuthControllerSignupRaw({ AdminAuthControllerSignupRequest: AdminAuthControllerSignupRequest }, initOverrides);
        return await response.value();
    }

}
